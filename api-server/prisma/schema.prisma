datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text @unique
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}




model Project {
  id           String        @id @default(uuid())
  name         String
  gitURL       String        @map("git_url")
  subDomain    String        @map("subdomain")
  customDomain String?       @map("custom_domain")
  user         User          @relation(fields: [userId], references: [id])
  userId       String        @map("user_id")
  Deployment  Deployment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DeploymentStatus {
  QUEUED
  IN_PROGRESS
  READY
  FAIL
}

model Deployment {
  id        String            @id @default(uuid())
  project   Project           @relation(fields: [projectId], references: [id])
  projectId String            @map("project_id")
  status    DeploymentStatus @default(QUEUED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EventLog {
  event_id      String     @id @default(uuid())
  deployment_id String
  log           String
  timestamp     DateTime   @default(now())
}